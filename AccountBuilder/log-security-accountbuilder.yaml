AWSTemplateFormatVersion: 2010-09-09
Description: Account Builder Template for log-security account.
Parameters:
  LogAccountEmail:
    Description: Account Email address
    Type: String
    AllowedPattern: .+
    ConstraintDescription: Must provide a valid email address
  LogAccountName:
    Description: Name of the new AWS Account Name
    Type: String
    AllowedPattern: .+
    ConstraintDescription: Provide the account name
  CloudtrailBucketName:
    Type: String
    Description: Bucket Name for cloudtrail
    Default: aws-landing-zone-cloudtrail-logs-client
  ConfigBucketName:
    Type: String
    Description: Bucket Name for cloudtrail
    Default: aws-landing-zone-config-logs-client
  s3loggingBucketName:
    Type: String
    Description: Logging Bucket name
    Default: aws-landing-zone-access-client
  organizationunitname:
    Description: Name of the organization unit to which the account should be moved to.
    Type: String
    Default: None
    AllowedPattern: .+
  stackname:
    Description: Name given to the stack deployed in the created account.
    Type: String
    AllowedPattern: .+
    Default: AccountBaseline
    ConstraintDescription: >-
      Must contain only letters, numbers, dashes and start with an alpha
      character
  stackregion:
    Description: Region for deploying the baseline template in the created account
    Default: ap-south-1
    Type: String
    AllowedPattern: .+
    AllowedValues:
      - us-east-2
      - us-east-1
      - us-west-1
      - us-west-2
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-south-1
      - ap-southeast-1
      - ap-southeast-2
      - ca-central-1
      - cn-north-1
      - cn-northwest-1
      - eu-central-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - sa-east-1
    ConstraintDescription: Must be a valid AWS region
  sourcebucket:
    Description: Bucket holding the baseline template file
    Type: String
    AllowedPattern: .+
  LogBaselineTemplate:
    Description: Baseline template to be deployed in the created account.
    Type: String
    Default: baseline-log.yaml
    AllowedPattern: .+
  SecurityAccountEmail:
    Description: Account Email address
    Type: String
    AllowedPattern: .+
    ConstraintDescription: Must provide a valid email address
  LogLambdafnName:
    Type: String
    Default: log-account-creation-function
  SecurityLambdafnName:
    Type: String
    Default: security-account-creation-function
  SecurityAccountName:
    Description: Name of the new AWS Account Name
    Type: String
    Default: security
    AllowedPattern: .+
    ConstraintDescription: Provide the account name
  SecurityBaselineTemplate:
    Description: Baseline template to be deployed in the created account.
    Type: String
    AllowedPattern: .+
    Default: baseline-security.yaml
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Log Account Creation Details
        Parameters:
          - LogAccountEmail
          - LogAccountName
          - CloudtrailBucketName
          - ConfigBucketName
          - s3loggingBucketName
          - LogBaselineTemplate
      - Label:
          default: Security Account Creation Details
        Parameters:
          - SecurityAccountEmail
          - SecurityAccountName
          - SecurityBaselineTemplate
      - Label:
          default: Lambda function names
        Parameters:
          - LogLambdafnName
          - SecurityLambdafnName
Resources:
  bucketParameterA:
    DependsOn:
      - AccountBuilderLambda
    Type: 'AWS::SSM::Parameter'
    DeletionPolicy: Retain
    Properties:
      Name: S3CloudtrailBucketName
      Type: String
      Value: !Ref CloudtrailBucketName
      Description: s3 bucket Name for cloudtrail logs.
  bucketParameterB:
    DependsOn:
      - AccountBuilderLambda
    Type: 'AWS::SSM::Parameter'
    DeletionPolicy: Retain
    Properties:
      Name: S3ConfigBucketName
      Type: String
      Value: !Ref ConfigBucketName
      Description: s3 bucket Name for config logs.
  AccountIdParameterLog:
    DependsOn:
      - AccountBuilderLambda
    Type: 'AWS::SSM::Parameter'
    DeletionPolicy: Retain
    Properties:
      Name: LogAccountId
      Type: String
      Value: !GetAtt TriggerLambda.AccountID
      Description: Log Account ID.
  AccountEmailParameterLog:
    DependsOn:
      - AccountBuilderLambda
    Type: 'AWS::SSM::Parameter'
    DeletionPolicy: Retain
    Properties:
      Name: LogAccountEmail
      Type: String
      Value: !Ref LogAccountEmail
      Description: Log Account Email.
  loggingbucketParameter:
    DependsOn:
      - AccountBuilderLambda
    Type: 'AWS::SSM::Parameter'
    DeletionPolicy: Retain
    Properties:
      Name: s3loggingbucketname
      Type: String
      Value: !Ref s3loggingBucketName
      Description: s3 bucket Name for cloudwatch log.
  LambdaLayer:
    Type: 'AWS::Lambda::LayerVersion'
    Properties:
      Content:
        S3Bucket: !Ref sourcebucket
        S3Key: requests.zip
      Description: Installs requests module
  AccountBuilderLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Ref LogLambdafnName
      Handler: AccountCreationLambda.main
      Runtime: python3.9
      Layers:
        - !Ref LambdaLayer
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 600
      TracingConfig:
        Mode: Active
      Code:
        S3Bucket: !Ref sourcebucket
        S3Key: AccountCreationLambda-log.zip
      Environment:
        Variables:
          lambda_function_name: !Ref LogLambdafnName
          accountemail: !Ref LogAccountEmail
          accountname: !Ref LogAccountName
          organizationunitname: !Ref organizationunitname
          stackname: !Ref stackname
          stackregion: !Ref stackregion
          sourcebucket: !Ref sourcebucket
          baselinetemplate: !Ref LogBaselineTemplate
          s3configbucketName: !Ref ConfigBucketName
          s3cloudtrailbucketName: !Ref CloudtrailBucketName
          s3loggingBucketName: !Ref s3loggingBucketName
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  LambdaExecutionPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: lambda-execution-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
            Resource: !Join 
              - ''
              - - 'arn:aws:logs:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':*'
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource:
              - !Join 
                - ''
                - - 'arn:aws:logs:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':log-group:/aws/lambda/'
                  - !Ref LogLambdafnName
                  - ':*'
          - Effect: Allow
            Action: '*'
            Resource: '*'
      Roles:
        - !Ref LambdaExecutionRole
  TriggerLambda:
    Type: 'Custom::TriggerLambda'
    DeletionPolicy: Retain
    DependsOn:
      - AccountBuilderLambda
      - LambdaExecutionRole
      - LambdaExecutionPolicy
    Properties:
      ServiceToken: !GetAtt AccountBuilderLambda.Arn
  AccountIdParameterSecurity:
    Type: 'AWS::SSM::Parameter'
    DeletionPolicy: Retain
    Properties:
      Name: SecurityAccountId
      Type: String
      Value: !GetAtt SecurityTriggerLambda.AccountID
      Description: Security Account ID.
  AccountEmailParameterSecurity:
    Type: 'AWS::SSM::Parameter'
    DeletionPolicy: Retain
    Properties:
      Name: SecurityAccountEmail
      Type: String
      Value: !Ref SecurityAccountEmail
      Description: Log Account Email.
  adminroleParameter:
    Type: 'AWS::SSM::Parameter'
    DeletionPolicy: Retain
    Properties:
      Name: AdminRoleArn
      Type: String
      Value: !Sub >-
        arn:aws:iam::${SecurityTriggerLambda.AccountID}:role/AWSLandingZoneSecurityAdministratorRole
      Description: admin role arn from security account.
  readonlyroleParameter:
    Type: 'AWS::SSM::Parameter'
    DeletionPolicy: Retain
    Properties:
      Name: ReadOnlyArn
      Type: String
      Value: !Sub >-
        arn:aws:iam::${SecurityTriggerLambda.AccountID}:role/AWSLandingZoneSecurityReadOnlyRole
      Description: read only role arn from security account.
  SecurityAccountBuilderLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Ref SecurityLambdafnName
      Handler: AccountCreationLambda.main
      Runtime: python3.9
      Layers:
        - !Ref LambdaLayer
      Role: !GetAtt SecurityLambdaExecutionRole.Arn
      Timeout: 600
      TracingConfig:
        Mode: Active
      Code:
        S3Bucket: !Ref sourcebucket
        S3Key: AccountCreationLambda-security.zip
      Environment:
        Variables:
          lambda_function_name: !Ref SecurityLambdafnName
          accountemail: !Ref SecurityAccountEmail
          accountname: !Ref SecurityAccountName
          organizationunitname: !Ref organizationunitname
          stackname: !Ref stackname
          stackregion: !Ref stackregion
          sourcebucket: !Ref sourcebucket
          baselinetemplate: !Ref SecurityBaselineTemplate
          AccountId: !GetAtt TriggerLambda.AccountID
          Email: !Ref LogAccountEmail
  SecurityTriggerLambda:
    Type: 'Custom::TriggerLambda'
    DeletionPolicy: Retain
    DependsOn:
      - AccountBuilderLambda
      - SecurityLambdaExecutionRole
      - SecurityLambdaExecutionPolicy
    Properties:
      ServiceToken: !GetAtt SecurityAccountBuilderLambda.Arn
  SecurityLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  SecurityLambdaExecutionPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: lambda-execution-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
            Resource: !Join 
              - ''
              - - 'arn:aws:logs:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':*'
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource:
              - !Join 
                - ''
                - - 'arn:aws:logs:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':log-group:/aws/lambda/'
                  - !Ref SecurityLambdafnName
                  - ':*'
          - Effect: Allow
            Action: '*'
            Resource: '*'
      Roles:
        - !Ref SecurityLambdaExecutionRole
Outputs:
  LogAccountStatus:
    Description: Execution Status for Log Account
    Value: !GetAtt TriggerLambda.Message
  LogAccountID:
    Description: ID of the new account
    Value: !GetAtt TriggerLambda.AccountID
  S3CloudtrailBucketName:
    Description: Cloudtrail Bucket Name
    Value: !Ref CloudtrailBucketName
  S3ConfigBucketName:
    Description: Config Bucket Name
    Value: !Ref ConfigBucketName
  loggingBucketName:
    Description: Cloudtrail logging Bucket Name
    Value: !Ref s3loggingBucketName
  SecurityAccountStatus:
    Description: Execution Status
    Value: !GetAtt SecurityTriggerLambda.Message
  SecurityAccountID:
    Description: ID of the new account
    Value: !GetAtt SecurityTriggerLambda.AccountID
  AdminRoleArn:
    Description: Admin role Arn
    Value: !Sub >-
      arn:aws:iam::${SecurityTriggerLambda.AccountID}:role/AWSLandingZoneSecurityAdministratorRole
    Export:
      Name: AdminRoleArn
  ReadOnlyRoleArn:
    Description: Role arn for read-only access.
    Value: !Sub >-
      arn:aws:iam::${SecurityTriggerLambda.AccountID}:role/AWSLandingZoneSecurityReadOnlyRole
    Export:
      Name: ReadOnlyRoleArn
