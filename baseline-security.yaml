AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Configure the AWS Landing Zone Security Roles to enable access to target
  accounts and GuardDuty Master.
Parameters:
  AdminRoleName:
    Type: String
    Description: Role name for administrator access.
    Default: AWSLandingZoneSecurityAdministratorRole
  ReadOnlyRoleName:
    Type: String
    Description: Role name for read-only access.
    Default: AWSLandingZoneSecurityReadOnlyRole
  LogAccountId:
    Type: String
  LogAccountEmail:
    Type: String
Resources:
  AdministrationRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Ref AdminRoleName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AssumeRole-AWSLandingZoneSecurityAdministratorRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sts:AssumeRole'
                Resource:
                  - 'arn:aws:iam::*:role/AWSLandingZoneAdminExecutionRole'
  ReadOnlyRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Ref ReadOnlyRoleName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AssumeRole-AWSLandingZoneSecurityReadOnlyRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sts:AssumeRole'
                Resource:
                  - 'arn:aws:iam::*:role/AWSLandingZoneReadOnlyExecutionRole'
  MasterDetector:
    Type: 'AWS::GuardDuty::Detector'
    Properties:
      Enable: true
  GDMasterMember:
    Type: 'AWS::GuardDuty::Member'
    Properties:
      Status: Invited
      MemberId: !Ref LogAccountId
      Email: !Ref LogAccountEmail
      Message: You are invited to enable Amazon Guardduty.
      DetectorId: !Ref MasterDetector
      DisableEmailNotification: true
  DectectorIdssm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: GuardDutyMasterDetectorId
      Type: String
      Value: !Ref MasterDetector
      Description: Master Detector Id
  GuardDutyFindingEventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: GuardDuty-Finding
      Description: Landing Zone rule to send notification on GuardDuty findings.
      EventPattern:
        source:
          - aws.guardduty
        detail-type:
          - GuardDuty Finding
      State: ENABLED
  LambdaExecuteRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service:
              - "lambda.amazonaws.com"
          Action:
            - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: LambdaAccessRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Effect: Allow
              Action: "*"
              Resource: "*"
  SecurityHub:
    Type: 'AWS::SecurityHub::Hub'
    Properties:
      Tags:
        key1: landingzone
        key2: true
  SecurityHubMember:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.main
      Runtime: python3.8
      Role: !GetAtt LambdaExecuteRole.Arn
      Timeout: 600
      TracingConfig:
        Mode: Active
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import cfnresponse


          def main(event, context):
            AccountId = os.environ['AccountId']
            Email = os.environ['Email'] 
            
            member = addmember(AccountId,Email)

            dataResponse = { "Message": "Resource create successful!" }
  
            cfnresponse.send(event, context, cfnresponse.SUCCESS, dataResponse)
            
            
          def addmember(AccountId,Email):    
            client = boto3.client('securityhub')
              
            response = client.create_members(
                  AccountDetails=[
                      {
                          'AccountId': AccountId,
                          'Email': Email
                      },
                  ]
              )
      Environment:
        Variables:
          Email: !Ref LogAccountEmail
          AccountId: !Ref LogAccountId
  TriggerLambda:
    Type: "Custom::TriggerLambda"
    DeletionPolicy: Retain
    DependsOn:
      - SecurityHubMember
      - LambdaExecuteRole
    Properties:
      ServiceToken: !GetAtt SecurityHubMember.Arn
Outputs:
  CrossAccountAdminRole:
    Description: AWS Landing Zone Security Administrator Role
    Value: !GetAtt AdministrationRole.Arn
    Export:
      Name: AdminRoleArn
  CrossAccountReadOnlyRole:
    Description: AWS Landing Zone Security ReadOnly Role
    Value: !GetAtt ReadOnlyRole.Arn
    Export:
      Name: ReadOnlyRoleArn
  LambdaRoleArn:
    Description: Lambda Role for lambda function
    Value: !GetAtt LambdaExecuteRole.Arn
    Export:
      Name: LambdaExecuteRole
  SecurityHubArn:
    Value: !Ref SecurityHub
  MasterDetectorId:
    Description: GuardDuty DetectorId for this region
    Value: !Ref MasterDetector
    Export:
      Name: GuardDutyMasterDetectorId